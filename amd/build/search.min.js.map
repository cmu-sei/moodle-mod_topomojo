{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["// amd/src/search.js\n// Namespace: mod_topomojo/search\ndefine([], function() {\n  'use strict';\n\n  /**\n   * Select all matching elements under a root and return a real array.\n   * @param {ParentNode} root\n   * @param {string} selector\n   * @returns {Element[]}\n   */\n  const selectAll = (root, selector) => Array.from(root.querySelectorAll(selector));\n\n  /**\n   * Normalize text for case-insensitive matching.\n   * @param {string} text\n   * @returns {string}\n   */\n  const normalize = (text) => (text || '').trim().toLowerCase();\n\n  /**\n   * Build a searchable string from a card's data attributes and visible text.\n   * @param {HTMLElement} cardEl\n   * @returns {string}\n   */\n  const buildSearchIndex = (cardEl) => {\n    return [\n      cardEl.dataset.name,\n      cardEl.dataset.course,\n      cardEl.dataset.tags,\n      cardEl.dataset.competencies,\n      cardEl.textContent\n    ].map(normalize).join(' ');\n  };\n\n  /**\n   * Bind search and filtering behavior to a single list container.\n   * @param {HTMLElement} listContainerEl Element with class `.lab-list`.\n   * @returns {void}\n   */\n  function bindList(listContainerEl) {\n    const searchInputEl   = listContainerEl.querySelector('.lab-search');\n    const clearButtonEl   = listContainerEl.querySelector('.lab-clear');\n    const cardsGridEl     = listContainerEl.querySelector('.lab-grid');\n    const cardEls         = cardsGridEl ? selectAll(cardsGridEl, '.lab-card') : [];\n    const emptyStateEl    = listContainerEl.querySelector('.lab-empty');\n    const resultCountEl   = listContainerEl.querySelector('.lab-result-count');\n\n    // Precompute search indexes for each card for readability & speed.\n    const cardIndexes = new Map();\n    cardEls.forEach(card => cardIndexes.set(card, buildSearchIndex(card)));\n\n    if (!searchInputEl || !cardsGridEl) {\n      return;\n    }\n\n    /**\n     * Update UI based on the current query.\n     */\n    const applyFilter = () => {\n      const query = normalize(searchInputEl.value);\n      let visibleCount = 0;\n\n      cardEls.forEach(card => {\n        const matches = !query || cardIndexes.get(card).includes(query);\n        card.style.display = matches ? '' : 'none';\n        if (matches) {\n          visibleCount++;\n        }\n      });\n\n      if (emptyStateEl) {\n        emptyStateEl.style.display = visibleCount === 0 ? '' : 'none';\n      }\n\n      if (resultCountEl) {\n        if (query) {\n          resultCountEl.style.display = 'block';\n          resultCountEl.textContent = `${visibleCount} result${visibleCount === 1 ? '' : 's'} for “${query}”`;\n        } else {\n          resultCountEl.style.display = 'none';\n          resultCountEl.textContent = '';\n        }\n      }\n\n      if (clearButtonEl) {\n        clearButtonEl.style.display = query ? 'block' : 'none';\n      }\n    };\n\n    // Wire up events.\n    searchInputEl.addEventListener('input', applyFilter);\n\n    if (clearButtonEl) {\n      clearButtonEl.addEventListener('click', () => {\n        searchInputEl.value = '';\n        applyFilter();\n        searchInputEl.focus();\n      });\n    }\n\n    // Quick slash-focus for convenience, scoped to this container.\n    listContainerEl.addEventListener('keydown', (event) => {\n      const isSlash = event.key === '/';\n      const isNotAlreadyFocused = document.activeElement !== searchInputEl;\n      if (isSlash && isNotAlreadyFocused) {\n        event.preventDefault();\n        searchInputEl.focus();\n      }\n    });\n  }\n\n  /**\n   * Initialize search on all matching list containers.\n   * @param {string} [rootSelector='.lab-list'] CSS selector for list containers.\n   * @returns {void}\n   */\n  function init(rootSelector) {\n    const selector = rootSelector || '.lab-list';\n    const listContainers = document.querySelectorAll(selector);\n    listContainers.forEach(bindList);\n  }\n\n  return { init };\n});\n"],"names":["define","normalize","text","trim","toLowerCase","bindList","listContainerEl","searchInputEl","querySelector","clearButtonEl","cardsGridEl","cardEls","root","selector","Array","from","querySelectorAll","emptyStateEl","resultCountEl","cardIndexes","Map","forEach","card","set","cardEl","dataset","name","course","tags","competencies","textContent","map","join","applyFilter","query","value","visibleCount","matches","get","includes","style","display","addEventListener","focus","event","isSlash","key","isNotAlreadyFocused","document","activeElement","preventDefault","init","rootSelector"],"mappings":"AAEAA,6BAAO,IAAI,iBAgBHC,UAAaC,OAAUA,MAAQ,IAAIC,OAAOC,uBAsBvCC,SAASC,uBACVC,cAAkBD,gBAAgBE,cAAc,eAChDC,cAAkBH,gBAAgBE,cAAc,cAChDE,YAAkBJ,gBAAgBE,cAAc,aAChDG,QAAkBD,aAjCPE,KAiC+BF,YAjCzBG,SAiCsC,YAjCzBC,MAAMC,KAAKH,KAAKI,iBAAiBH,YAiCO,GAjC5D,IAACD,KAAMC,eAkCjBI,aAAkBX,gBAAgBE,cAAc,cAChDU,cAAkBZ,gBAAgBE,cAAc,qBAGhDW,YAAc,IAAIC,OACxBT,QAAQU,SAAQC,OAAQH,OAAAA,YAAYI,IAAID,KAxBjC,EADiBE,OAyBuCF,MAvBtDG,QAAQC,KACfF,OAAOC,QAAQE,OACfH,OAAOC,QAAQG,KACfJ,OAAOC,QAAQI,aACfL,OAAOM,aACPC,IAAI9B,WAAW+B,KAAK,MAPER,IAAAA,WA2BnBjB,gBAAkBG,yBAOjBuB,YAAc,WACZC,MAAQjC,UAAUM,cAAc4B,WAClCC,aAAe,EAEnBzB,QAAQU,SAAQC,aACRe,SAAWH,OAASf,YAAYmB,IAAIhB,MAAMiB,SAASL,OACzDZ,KAAKkB,MAAMC,QAAUJ,QAAU,GAAK,OAChCA,SACFD,kBAIAnB,eACFA,aAAauB,MAAMC,QAA2B,IAAjBL,aAAqB,GAAK,QAGrDlB,gBACEgB,OACFhB,cAAcsB,MAAMC,QAAU,QAC9BvB,cAAcY,sBAAiBM,+BAAuC,IAAjBA,aAAqB,GAAK,qBAAYF,aAE3FhB,cAAcsB,MAAMC,QAAU,OAC9BvB,cAAcY,YAAc,KAI5BrB,gBACFA,cAAc+B,MAAMC,QAAUP,MAAQ,QAAU,SAKpD3B,cAAcmC,iBAAiB,QAAST,aAEpCxB,eACFA,cAAciC,iBAAiB,SAAS,KACtCnC,cAAc4B,MAAQ,GACtBF,cACA1B,cAAcoC,WAKlBrC,gBAAgBoC,iBAAiB,WAAYE,cACrCC,QAAwB,MAAdD,MAAME,IAChBC,oBAAsBC,SAASC,gBAAkB1C,cACnDsC,SAAWE,sBACbH,MAAMM,iBACN3C,cAAcoC,kBAgBb,CAAEQ,cANKC,oBACNvC,SAAWuC,cAAgB,YACVJ,SAAShC,iBAAiBH,UAClCQ,QAAQhB"}